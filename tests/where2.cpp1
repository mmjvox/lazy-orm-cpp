#include <iostream>
//#include "MariadbLazy.h"
#include "MariadbFilteringLazy.h"

#include <catch2/catch_all.hpp>
#include <cstdint>


std::string aaaaaa() {

//    LazyOrm::WhereFilter p0 = { LazyOrm::Filters::AND, {
//                          std::vector<LazyOrm::DbVariant>{3,4},
//                          {
//                              std::vector<LazyOrm::WhereFilter>{
//                                  { LazyOrm::Filters::OR, {
//                                                       std::vector<LazyOrm::DbVariant>{5,"6"},
//                                                       {
//                                                           std::vector<LazyOrm::WhereFilter>{
//                                                               { LazyOrm::Filters::AND, {
//                                                                                     { "foo" },
//                                                                                     { "bar" }
//                                                                                 }
//                                                               },
//                                                               { LazyOrm::Filters::AND, { "name","like","an%" } }
//                                                           }
//                                                       }
//                                                   }
//                                  },
//                                  { LazyOrm::Filters::OR, { "AGE","in","[4,5,6,7,8]" } }
//                              }
//                          }
//                      }
//    };

//  LazyOrm::WhereFilter p1 = {
//   LazyOrm::Filters::AND,
//    {
//      {3,4},

//        {
//          {
//             LazyOrm::Filters::OR, {
//              {5,"6"},
//              {
//                  { LazyOrm::Filters::AND, {
//                      { "foo" },
//                      { "bar" }
//                    }
//                  },
//                  { LazyOrm::Filters::AND, { "name","like","an%" } }
//              }
//            }
//          },
//          { LazyOrm::Filters::OR, { "AGE","in","[4,5,6,7,8]" } }
//        }

//    }
//  };

//    LazyOrm::WhereFilter p1_1 = {
//        {LazyOrm::Filters::AND,{{3,4}}},
//        {LazyOrm::Filters::OR,{{3,4}}}
//    };

//  LazyOrm::WhereFilter p1_2 = {
//      {LazyOrm::Filters::AND,{3,4}},
//      {LazyOrm::Filters::OR,{3,4}}
//  };

//  LazyOrm::WhereFilter p1_3 = {{LazyOrm::Filters::AND, {"AGE","<=",30}},{LazyOrm::Filters::AND, {"AGE","<=",30}}};

//  LazyOrm::WhereFilter p2 = {LazyOrm::Filters::AND, {"AGE","<=",30}};

//  LazyOrm::WhereFilter p3 = {{"AGE","<=",30}};

//  LazyOrm::WhereFilter p4 = {{"a wwwww ccc"}};

//  // Accessing the nested elements:
//  auto& nested1 = std::get<std::vector<WherePair>>(std::get<std::vector<WherePair>>(p1.nested[2]));
//  auto& nested2 = std::get<std::vector<WherePair>>(std::get<std::vector<WherePair>>(nested1[1].nested[1]));
//  auto limit = std::get<int>(nested2[0].nested[1]);
//  std::cout << "Limit: " << limit << std::endl;

  LazyOrm::MariadbFilteringLazy filters;
//  filters.setWhereFilter(p1);

  return filters.where_conditions();
}


std::string bbbbbb() {
  LazyOrm::MariadbFilteringLazy filters;
//  filters[LazyOrm::WHERE] = {
//      LazyOrm::AND,
//      {
//          {3,4},

//          {
//              {
//                  LazyOrm::OR, {
//                      {5,"6"},
//                      {
//                          { LazyOrm::AND, {
//                                                { "foo" },
//                                                { "bar" }
//                                            }
//                          },
//                          { LazyOrm::AND, { "name","like","an%" } }
//                      }
//                  }
//              },
//              { LazyOrm::OR, { "AGE","in","[4,5,6,7,8]" } }
//          }

//      }
//  };
////  filters[LazyOrm::WHERE] = {{LazyOrm::AND, {"AGE","<=",30}},{LazyOrm::AND, {"AGE","<=",30}}};
//  filters[LazyOrm::WHERE] = {LazyOrm::AND, {{LazyOrm::OR, {"AGE","<=",30}} , {LazyOrm::OR,{"AGE","<=",30}}} };
////  filters[LazyOrm::WHERE] = {{LazyOrm::AND, {"AGE","<=",30}}};
//  filters[LazyOrm::Filters::WHERE] = {LazyOrm::_OR{}, {"AGE","<=",30}};
  filters[LazyOrm::WHERE] = {"or", {{"AGE","<=",30},{"AGE","<=",30}}};
  filters[LazyOrm::WHERE] = {{"or"}, {{"AGE","<=",30},{"AGE","<=",30}}};
//  filters[LazyOrm::WHERE] = {{"AGE","<=",30}};
//  filters[LazyOrm::WHERE] = {"a wwwww ccc"};
//  filters[LazyOrm::WHERE] = "a wwwww ccc";

//  LazyOrm::WhereFilter(LazyOrm::_AND{}, {"AGE","<=",30});
//  LazyOrm::WhereFilter{LazyOrm::_AND{}, {"AGE","<=",30}};

  return filters.where_conditions();
}

TEST_CASE( "Factorials are computed", "[Lazy_WHERE2]" ) {

    std::cout <<"where2 " << bbbbbb() << std::endl;

//    REQUIRE( select1() == R"(SELECT *,`age`,`hair`,`name` FROM student;)" );
//    REQUIRE( select2() == R"(SELECT *,`age`,`hair`,`name` FROM student;)" );
}
